#!/bin/sh

# This config file is based off of the one for musl libc

usage () {
cat << EOF
Generates build.ninja files

Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE. Unlike with Make, environment variables are captured only
at configuration time and later changes to the environment are not
picked up by Ninja. If you want to change the variables in the build,
run $0 again.

Defaults for the options are specified in brackets.

Installation and Host directories are used for building, not after.
Target directories are built into the binary. If you are planning on
changing the layout of the filesystem changing after installation,
plan accordingly.

Configuration:
  --srcdir=DIR            source directory [detected]
  --prefix=PREFIX         main installation prefix [/usr/local/tcc]

Installation directories:
  --inst-bindir=DIR       where to install the TCC binary [PREFIX/bin]
  --inst-libdir=DIR       where to install TCC library files
                          [PREFIX/lib]
  --inst-includedir=DIR   where to install TCC library headers
                          [PREFIX/include]

System types:
  --build=BUILD           indicate CPU architecture of machine 
                          building TCC [detected]
  --host=HOST             configure TCC to run on HOST CPU 
                          architecture [BUILD]
  --target=TARGET         configure TCC to produce binaries that run
                          on TARGET CPU architecture [HOST]

Host directories:
  --host-includedir=DIR   The location of include files for the HOST
                          architecture [detected]
  --host-libdir=DIR       The location of library files for the HOST
                          architecture [detected]

Target directories:
  --target-sysroot=DIR    The default root of the TARGET system to look
                          for libraries and include files [/]

Optional features:
  --enable-asm            compile TCC with assembly support [enabled]
  --enable-debug          compile TCC with debugging support (requires
                          glibc) [disabled]
  --enable-boundry-check  compile TCC with boundry-checking support
                          (requires glibc) [disabled]
  --enable-static         statically link compiler [enabled]

Relevant environment variables:
  CC                      C compiler command [detected]
  CFLAGS                  C compiler flags [none]

EOF
exit 0
}

# Helper functions

quote () {
tr '\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo "$1" ; return 0 ; }
$1
EOF
printf %s\\n "$1" | sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" -e "s#^'\([-[:alnum:]_,./:]*\)=\(.*\)\$#\1='\2#"
}
echo () { printf "%s\n" "$*" ; }
cmdexists () { type "$1" >/dev/null 2>&1 ; }
trycc () { test -z "$CC" && cmdexists "$1" && CC=$1 ; }


# Beginning of actual script

version=$(cat VERSION)
obj_files="libtcc-rt.o tcc.o tccelf.o"
cpp_defs="-DTCC_VERSION='\"${version}\"'"

src_dir=
prefix="/usr/local/tcc"
inst_bindir=
inst_libdir=
inst_includedir=
build_arch=
host_arch=
target_arch=
host_libdir=
host_includedir=
target_sysroot=
static='-static -DCONFIG_TCC_STATIC'
boundry=
with_asm='-DCONFIG_TCC_ASM'

for arg ; do
case "$arg" in
--help|-h) usage ;;
--srcdir=*) srcdir=${arg#*=} ;;
--prefix=*) prefix=${arg#*=} ;;
--inst-bindir=*) inst_bindir=${arg#*=} ;;
--inst-libdir=*) inst_libdir=${arg#*=} ;;
--inst-includedir=*) inst_includedir=${arg#*=} ;;
--build=*) build_arch=${arg#*=} ;;
--host=*) host_arch=${arg#*=} ;;
--target=*) target_arch=${arg#*=} ;;
--host-libdir=*) host_libdir=${arg#*=} ;;
--host-includedir=*) host_includedir=${arg#*=} ;;
--target-sysroot=*) target_sysroot=${arg#*=} ;;
--enable-asm|--enable-asm=yes) with_asm='-DCONFIG_TCC_ASM' ;;
--disable-asm|--enable-asm=no) with_asm= ;;
--enable-debug|--enable-debug=yes) cpp_defs="$cpp_defs -DCONFIG_TCC_DEBUG";;
--disable-debug|--enable-debug=no) ;;
--enable-boundry-check|--enable-boundry-check=yes) boundry=yes ;;
--disable-boundry-check|--enable-boundry-check=no) boundry= ;;
--enable-static|--enable-static=yes) static='-static -DCONFIG_TCC_STATIC' ;;
--disable-static|--enable-static=no) static= ;;
-* ) echo "$0: unknown option $arg" ;;
CC=*) CC=${arg#*=} ;;
CFLAGS=*) CFLAGS=${arg#*=} ;;
esac
done

#
# Get the source dir for out-of-tree builds
#
if test -z "$srcdir" ; then
srcdir="${0%configure}"
fi

test -n "$inst_bindir" || inst_bindir="${prefix}/bin";
test -n "$inst_libdir" || inst_libdir="${prefix}/lib";
test -n "$inst_includedir" || inst_includedir="${prefix}/include";

#
# Configure architectures
#
printf "checking build architecture... "
test -n "$build_arch" || build_arch=$(uname -m) || build_arch=unknown;
printf "%s\n" "$build_arch"

printf "checking host architecture... "
test -n "$host_arch" || host_arch=$build_arch;
printf "%s\n" "$host_arch"

printf "checking target architecture... "
test -n "$target_arch" || target_arch=$host_arch;
case "$target_arch" in
cil*) target_arch=il cpp_defs="$cpp_defs -DTCC_TARGET_IL";;
il*) target_arch=il cpp_defs="$cpp_defs -DTCC_TARGET_IL";;
i?86*) target_arch=i386 cpp_defs="$cpp_defs -DTCC_TARGET_I386";;
arm*) target_arch=arm with_asm= cpp_defs="$cpp_defs -DTCC_TARGET_ARM";;
x86_64*) target_arch=x86_64 with_asm= cpp_defs="$cpp_defs -DTCC_TARGET_X86_64";;
*) printf "\nunknown or unsupported target \"$target_arch\"\n" && exit 1;;
esac
printf "%s\n" "$target_arch"

#
# Find a C compiler to use
#
printf "checking for C compiler... "
if [ "$host_arch" != "$build_arch" ] && [ -z "$CC" ] ; then
printf "\nmust explicitly indicate compiler via \$CC when cross-compiling!\n"
exit 1
fi
trycc tcc
trycc gcc
trycc clang
trycc cc
printf "%s\n" "$CC"

# Update obj targets
obj_files="$obj_files ${target_arch}-gen.o"
if [ -n "$with_asm" ]; then
obj_files="$obj_files tccasm.o ${target_arch}-asm.o"
cpp_defs="$cpp_defs $with_asm"
fi 
if [ -n "$boundry" ]; then
obj_files="$obj_files bcheck.o"
cpp_defs="$cpp_defs -DCONFIG_TCC_BCHECK"
fi 

# Update target directories
cpp_defs="$cpp_defs -DCONFIG_SYSROOT='\"${target_sysroot}\"'"


#
# Write build.ninja
#

cmdline=$(quote "$0")
for i ; do cmdline="$cmdline $(quote "$i")" ; done

cat > build.ninja << EOF
# This build.ninja file was generated by:
# $cmdline
# Any changes made here will be lost if configure is re-run

cc=$CC
cflags=$CFLAGS
static=$static
defs=$cpp_defs

EOF

if test -n "$host_includedir" ; then
cat >> build.ninja << EOF
hinc=-nostdinc -I$host_includedir
EOF
fi

if test -n "$host_libdir" ; then
cat >> build.ninja << EOF
hlib=-nostdlib -L$host_libdir
EOF
fi

cat >> build.ninja << EOF

inst_bindir=$inst_bindir
inst_libdir=$inst_libdir

rule obj-compile
  command = \$cc \$hinc \$static \$cflags -I. -c \$defs -o \$out \$in

rule link
  command = \$cc \$hlib \$static \$cflags -o \$out \$in -ldl

rule install
  command = cp \$in \$out

EOF

for file in $obj_files; do cat >> build.ninja << EOF
build $file: obj-compile ${srcdir}${file%o}c

EOF
done

cat >> build.ninja << EOF
build tcc: link ${obj_files#libtcc-rt.o }

build \$inst_bindir/tcc: install tcc

build \$inst_libdir/tcc/libtcc-rt.o: install libtcc-rt.o

build install: phony \$inst_libdir/tcc/libtcc-rt.o \$inst_bindir/tcc

default tcc libtcc-rt.o
EOF
exit 0
