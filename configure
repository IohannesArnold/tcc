#!/bin/sh

# This config file is based off of the one for musl libc

usage () {
cat << EOF
Generates build.ninja files

Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE. Unlike with Make, environment variables are captured ony at
configuration time and later changes to the environment are not picked
up by Ninja. If you want to change the variables in the build, run
$0 again.

Defaults for the options are specified in brackets.

System types:
  --build=BUILD           indicate CPU architecture of machine building
                          TCC [detected]
  --host=HOST             configure TCC to run on HOST CPU architecture
                          [BUILD]
  --target=TARGET         configure TCC to produce binaries that run on
                          TARGET CPU architecture [HOST]

Optional features:
  --enable-boundry-check  compile TCC with boundry-checking support
                          (requires glibc) [disabled]
  --enable-static         statically link compiler [enabled]

Relevant environment variables:
  CC                      C compiler command [detected]
  CFLAGS                  C compiler flags [none]

EOF
exit 0
}

# Helper functions

quote () {
tr '\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo "$1" ; return 0 ; }
$1
EOF
printf %s\\n "$1" | sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" -e "s#^'\([-[:alnum:]_,./:]*\)=\(.*\)\$#\1='\2#"
}
echo () { printf "%s\n" "$*" ; }
cmdexists () { type "$1" >/dev/null 2>&1 ; }
trycc () { test -z "$CC" && cmdexists "$1" && CC=$1 ; }

# Beginning of actual script

obj_files="libtcc-rt.o tcc.o"
build_arch=
host_arch=
target_arch=
static='-static -DCONFIG_TCC_STATIC'
boundry=
cpp_defs=

for arg ; do
case "$arg" in
--help|-h) usage ;;
--build=*) build_arch=${arg#*=} ;;
--host=*) host_arch=${arg#*=} ;;
--target=*) target_arch=${arg#*=} ;;
--enable-static|--enable-static=yes) static='-static -DCONFIG_TCC_STATIC' ;;
--disable-static|--enable-static=no) static= ;;
--enable-boundry-check|--enable-boundry-check=yes) boundry=yes ;;
--disable-boundry-check|--enable-boundry-check=no) boundry= ;;
-* ) echo "$0: unknown option $arg" ;;
CC=*) CC=${arg#*=} ;;
CFLAGS=*) CFLAGS=${arg#*=} ;;
CROSS_COMPILE=*) CROSS_COMPILE=${arg#*=} ;;
esac
done

#
# Configure architectures
#
printf "checking build architecture... "
test -n "$build_arch" || build_arch=$(uname -m) || build_arch=unknown;
printf "%s\n" "$build_arch"

printf "checking host architecture... "
test -n "$host_arch" || host_arch=$build_arch;
printf "%s\n" "$host_arch"

printf "checking target architecture... "
test -n "$target_arch" || target_arch=$host_arch;
case "$target_arch" in
cil*) target_arch=il cpp_defs="$cpp_defs -DTCC_TARGET_IL";;
il*) target_arch=il cpp_defs="$cpp_defs -DTCC_TARGET_IL";;
i?86*) target_arch=i386 cpp_defs="$cpp_defs -DTCC_TARGET_I386";;
*) printf "\nunknown or unsupported target \"$target_arch\"\n" && exit 1;;
esac
printf "%s\n" "$target_arch"

#
# Find a C compiler to use
#
printf "checking for C compiler... "
if [ "$host_arch" != "$build_arch" ] && [ -z "$CC" ] ; then
printf "\nmust explicitly indicate compiler via \$CC when cross-compiling!\n"
exit 1
fi
trycc tcc
trycc gcc
trycc clang
trycc cc
printf "%s\n" "$CC"

# Update obj targets
obj_files="$obj_files ${target_arch}-gen.o"
if [ -n "$boundry" ]; then
obj_files="$obj_files bcheck.o"
cpp_defs="$cpp_defs -DCONFIG_TCC_BCHECK"
fi 

#
# Write build.ninja
#

cmdline=$(quote "$0")
for i ; do cmdline="$cmdline $(quote "$i")" ; done

cat > build.ninja << EOF
# This build.ninja file was generated by:
# $cmdline
# Any changes made here will be lost if configure is re-run

cc=$CC
cflags=$CFLAGS
static=$static
defs=$cpp_defs

rule obj-compile
  command = \$cc \$cflags -I. -c \$defs -o \$out \$in

rule link
  command = \$cc \$static \$cflags -o \$out \$in

EOF

for file in $obj_files; do cat >> build.ninja << EOF
build $file: obj-compile ${file%o}c

EOF
done

cat >> build.ninja << EOF
build tcc: link ${obj_files#libtcc-rt.o }
EOF
exit 0
